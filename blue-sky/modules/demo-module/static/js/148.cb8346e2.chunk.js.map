{"version":3,"file":"static/js/148.cb8346e2.chunk.js","mappings":"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","sources":["GameModule.js","components/game/Dice.js","components/game/GameTimer.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport { Button, VARIANTS } from '@Green-Dot-Corporation/eureka-ui-buttons';\nimport { Heading } from '@Green-Dot-Corporation/eureka-ui-typography';\nimport { dateFNS } from '@Green-Dot-Corporation/eureka-lib-date-time-utils';\nimport { Modal } from '@Green-Dot-Corporation/eureka-ui-modals';\n\nimport Dice from './components/game/Dice';\nimport GameTimer from './components/game/GameTimer';\nimport './styles/game.scss';\n\nconst { differenceInMilliseconds } = dateFNS;\n\nclass GameModule extends PureComponent {\n    state = {\n        hasGameStarted: false,\n        frozenNumbers: [],\n        numbers: [],\n    };\n\n    render() {\n        const { hasGameStarted, isGameOver, elapsedTime } = this.state;\n\n        return (\n            <div className={`${this.baseCls}__container`}>\n                <Modal\n                    dialogContextCls={`${this.baseCls}__flyout-menu`}\n                    isOpen={isGameOver}\n                    hasCloseButton\n                    onExit={this.handleDialogExit}\n                >\n                    <p>Congratulations</p>\n                    <p>You finished the game in {elapsedTime} seconds</p>\n                </Modal>\n                <Heading headingLvl={4}>\n                    Roll until all dice are the same. Click each die to freeze\n                    it at its current value between rolls.\n                </Heading>\n                {hasGameStarted && <GameTimer elapsedTime={elapsedTime} />}\n                <div className={`${this.baseCls}__dice-container`}>\n                    {this.renderDice()}\n                </div>\n                {this.renderButtons()}\n            </div>\n        );\n    }\n\n    renderDice = () => {\n        const { hasGameStarted, numbers, frozenNumbers } = this.state;\n\n        let currentNumbers = numbers;\n\n        if (!hasGameStarted) {\n            currentNumbers = Array(10).fill(0);\n        }\n        const dices = [];\n\n        for (let i = 0; i < 10; i += 1) {\n            dices.push(\n                <Dice\n                    isFrozen={frozenNumbers.indexOf(i) !== -1}\n                    onNumberSelect={this.handleNumberSelect}\n                    key={i}\n                    value={currentNumbers[i]}\n                    diceIndex={i}\n                />,\n            );\n        }\n\n        return dices;\n    };\n\n    renderButtons = () => {\n        const { hasGameStarted } = this.state;\n\n        if (!hasGameStarted) {\n            return (\n                <Button\n                    variant={VARIANTS.PRIMARY}\n                    onClick={this.handleStartClick}\n                >\n                    New Game\n                </Button>\n            );\n        }\n\n        return (\n            <>\n                <Button\n                    variant={VARIANTS.PRIMARY}\n                    onClick={this.handleRollClick}\n                >\n                    Roll\n                </Button>\n                <Button onClick={this.handleCancelClick}>Cancel</Button>\n            </>\n        );\n    };\n\n    handleRollClick = () => {\n        const { frozenNumbers, numbers } = this.state;\n\n        for (let i = 0; i < 10; i += 1) {\n            if (frozenNumbers.indexOf(i) === -1) {\n                const randNum = Math.floor(Math.random() * 6);\n                numbers[i] = randNum;\n            }\n        }\n\n        this.setState({\n            numbers: [...numbers],\n        });\n    };\n\n    handleCancelClick = () => {\n        clearInterval(this.timerId);\n        this.timerId = undefined;\n        this.setState({\n            hasGameStarted: false,\n            numbers: [],\n            frozenNumbers: [],\n        });\n    };\n\n    handleStartClick = () => {\n        const numbers = [];\n        while (numbers.length < 10) {\n            const randNum = Math.floor(Math.random() * 6);\n\n            numbers.push(randNum);\n        }\n        this.setState(\n            {\n                numbers,\n                hasGameStarted: true,\n            },\n            () => {\n                const startTime = Date.now();\n                this.timerId = setInterval(() => {\n                    this.setState({\n                        elapsedTime:\n                            differenceInMilliseconds(Date.now(), startTime) /\n                            1000,\n                    });\n                }, 10);\n            },\n        );\n    };\n\n    handleNumberSelect = ({ diceIndex }) => {\n        let { frozenNumbers } = this.state;\n        const { hasGameStarted, numbers } = this.state;\n\n        if (!hasGameStarted) {\n            return;\n        }\n\n        if (frozenNumbers.indexOf(diceIndex) !== -1) {\n            frozenNumbers = frozenNumbers.filter((e) => e !== diceIndex);\n        } else {\n            frozenNumbers = [...frozenNumbers, diceIndex];\n        }\n\n        if (frozenNumbers.length === 10) {\n            const filtered = numbers.filter((n) => n !== numbers[0]);\n\n            if (filtered.length === 0) {\n                clearInterval(this.timerId);\n                this.timerId = undefined;\n                this.setState({\n                    hasGameStarted: false,\n                    numbers: [],\n                    frozenNumbers: [],\n                    isGameOver: true,\n                });\n\n                return;\n            }\n        }\n\n        this.setState({\n            frozenNumbers,\n        });\n    };\n\n    handleDialogExit = () => {\n        this.setState({\n            isGameOver: false,\n            elapsedTime: 0,\n        });\n    };\n\n    baseCls = 'game';\n}\n\nexport default GameModule;\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport cx from 'classnames';\nimport { Button } from '@Green-Dot-Corporation/eureka-ui-buttons';\nimport './styles/dice.scss';\n\nconst CSS_CLASSES = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];\n\nclass Dice extends PureComponent {\n    static propTypes = {\n        value: PropTypes.number,\n        diceIndex: PropTypes.number,\n        onNumberSelect: PropTypes.func,\n        isFrozen: PropTypes.bool,\n    };\n\n    render() {\n        const { value, isFrozen } = this.props;\n\n        return (\n            <Button\n                onClick={this.handleDiceClick}\n                contextCls={cx(\n                    this.baseCls,\n                    `${CSS_CLASSES[value]}-face`,\n                    isFrozen && 'frozen',\n                )}\n            >\n                {this.renderDots()}\n            </Button>\n        );\n    }\n\n    renderDots = () => {\n        const { value } = this.props;\n        const dots = [];\n\n        for (let i = 0; i <= value; i += 1) {\n            dots.push(<span key={i} className=\"dot\" />);\n        }\n\n        return dots;\n    };\n\n    handleDiceClick = () => {\n        const { value, onNumberSelect, diceIndex } = this.props;\n        onNumberSelect({ value, diceIndex });\n    };\n\n    baseCls = 'dice';\n}\n\nexport default Dice;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass GameTimer extends Component {\n    static propTypes = {\n        elapsedTime: PropTypes.number,\n    };\n\n    state = {};\n\n    render() {\n        const { elapsedTime = '' } = this.props;\n\n        return <div>{elapsedTime}</div>;\n    }\n}\n\nexport default GameTimer;\n"],"names":["differenceInMilliseconds","dateFNS","GameModule","state","hasGameStarted","frozenNumbers","numbers","renderDice","currentNumbers","Array","fill","dices","i","push","isFrozen","indexOf","onNumberSelect","handleNumberSelect","value","diceIndex","renderButtons","variant","VARIANTS","onClick","handleRollClick","handleCancelClick","handleStartClick","randNum","Math","floor","random","setState","clearInterval","timerId","undefined","length","startTime","Date","now","setInterval","elapsedTime","filter","e","n","isGameOver","handleDialogExit","baseCls","this","className","dialogContextCls","isOpen","hasCloseButton","onExit","headingLvl","PureComponent","CSS_CLASSES","Dice","renderDots","props","dots","handleDiceClick","contextCls","cx","GameTimer","Component"],"sourceRoot":""}